/* Solution 1 */
DROP FUNCTION IF EXISTS get_total;
CREATE FUNCTION get_total(items VARCHAR(45)) RETURNS INT DETERMINISTIC
BEGIN
     SET @out := 0, @i := 1;
    
    WHILE REGEXP_SUBSTR(items, "\\d++", 1, @i) IS NOT NULL DO
        SET @out := @out + (SELECT price FROM item_prices
            WHERE id = REGEXP_SUBSTR(items, "\\d++", 1, @i) + 0);
        SET @i := @i + 1;
    END WHILE;
    
    RETURN @out;
END;

CREATE PROCEDURE solution()
BEGIN
    SELECT id, buyer, get_total(items) AS total_price
    FROM orders
    ORDER BY id;
END;

/* Solution 2 */
DROP FUNCTION IF EXISTS get_total;
CREATE FUNCTION get_total(items VARCHAR(45)) RETURNS INT DETERMINISTIC
BEGIN
    SET @next = '';
    SET @nextLen = 0;
    SET @ret = 0;
        iterator:
    LOOP
        IF LENGTH(items) = 0 OR items IS NULL THEN
            LEAVE iterator;
        END IF;

        SET @next = SUBSTRING_INDEX(items,';',1);
        SET @nextLen = LENGTH(@next);
  
        SELECT @ret+price INTO @ret FROM item_prices WHERE id=@next LIMIT 1;
  
        SET items = INSERT(items,1,@nextLen + 1,'');
    END LOOP;
    RETURN @ret;

END;

CREATE PROCEDURE solution()
BEGIN
    SELECT id, buyer, get_total(items) AS total_price
    FROM orders
    ORDER BY id;
END;

/* Solution 3 */

CREATE PROCEDURE customerMessages()
BEGIN
    SELECT id, name, response(name) AS response
    FROM customers;
END;

DROP FUNCTION IF EXISTS get_total;
CREATE FUNCTION get_total(items VARCHAR(45)) RETURNS INT DETERMINISTIC
BEGIN

    SET @Sum = 0;
    SET @remainingItems = CONCAT(items, ';');

    WHILE LOCATE(';', @remainingItems) != 0 DO

        SET @CurNumber = SUBSTRING(@remainingItems FROM 1 FOR LOCATE(';', @remainingItems) - 1);
        SET @Sum = @Sum + (SELECT price FROM item_prices WHERE id = @CurNumber);

        SET @remainingItems = SUBSTRING(@remainingItems, LOCATE(';', @remainingItems) + 1);
    
    END WHILE;
    
    RETURN @Sum;


END;

CREATE PROCEDURE orderPrices()
BEGIN
    SELECT id, buyer, get_total(items) AS total_price
    FROM orders
    ORDER BY id;
END;

/* Solution 4 */
DROP FUNCTION IF EXISTS get_total;
CREATE FUNCTION get_total(items VARCHAR(45)) RETURNS INT DETERMINISTIC
BEGIN
  SET @next = '';
  SET @nextLen = 0;
  SET @ret = 0;
    iterator:
LOOP
  IF LENGTH(items) = 0 OR items IS NULL THEN
    LEAVE iterator;
  END IF;

  SET @next = SUBSTRING_INDEX(items,';',1);
  SET @nextLen = LENGTH(@next);
  
  SELECT @ret+price INTO @ret FROM item_prices WHERE id=@next LIMIT 1;
  
  SET items = INSERT(items,1,@nextLen + 1,'');
END LOOP;
  RETURN @ret;
END;

CREATE PROCEDURE orderPrices()
BEGIN
    SELECT id, buyer, get_total(items) AS total_price
    FROM orders
    ORDER BY id;
END;
